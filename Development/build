#!/usr/bin/env lua

local compile=false
local external=true
local archive_zip=true
local archive_7z=false
local icons=true
local debug_build=false
local changes_lua = true
local condense = true

function SplitVersion(ver)
  return string.gsub(ver, " on .*", ""), string.gsub(ver, ".* on ", "")
end

function AuthorizedVersion(ver)
  qhv, wowv = SplitVersion(ver)
  return qhv ~= "Development Version"
end

function PreWrath(ver)
  qhv, wowv = SplitVersion(ver)
  return wowv:sub(1,1) ~= '3'
end

for i, a in ipairs({...}) do
  local mode, option = select(3, string.find(a, "^([%+%-]?)(.*)$"))
  
  mode = mode ~= "-"
  
  if option == "zip" then archive_zip = mode
  elseif option == "7z" then archive_7z = mode
  elseif option == "compile" then compile = mode
  elseif option == "external" then external = mode
  elseif option == "icons" then icons = mode
  elseif option == "changes" then changes_lua = mode
  elseif option == "debug" then debug_build = mode
  elseif option == "condense" then condense = mode
  else
    print("Unknown option: "..option)
    return 1
  end
end

cache = {}
local cache_loader = loadfile("build-cache.lua")
if cache_loader then
  cache_loader()
  cache_loader = nil
end

if not cache.removed then cache.removed = {} end
if not cache.known then cache.known = {} end
if not cache.ignored then cache.ignored = {} end
if not cache.uid then cache.uid = {} end

local file2uid = {}
for uid, data in pairs(cache.uid) do file2uid[data.file] = uid end

-- so upgrade.lua doesn't freak out
GetTime = function () end
QuestHelper_File = {}
QuestHelper_Loadtime = {}

loadfile("dump.lua")()
loadfile("fileutil.lua")()
loadfile("../upgrade.lua")()
loadfile("compiler.lua")()
loadfile("pepperfish.lua")()
--loadfile("external.lua")()

profiler = newProfiler("time", 1000000)
--profiler:start()

QuestHelper_BuildZoneLookup()

if changes_lua then
  local stream = io.open("../changes.txt", "r")
  
  if stream then
    local function linkparse(a, b)
      b = b:gsub("^%s*(.-)%s*$", "%1")
      if b == "" then
        return a
      else
        return b
      end
    end
    
    local function totext(text)
      return text:gsub("%[%s*([^%s%]]+)(.-)%]", linkparse)
                 :gsub("<code>(.-)</code>", "|cff40bbff%1|r")
                 :gsub("^%s*==%s*(.-)%s*==%s*$", "|cffffff00       %1|r\n")
                 :gsub("^%*%*%s", "    • ")
                 :gsub("^%*%s", "• ")
                 :gsub("<a href=\"http://www.mandible.net\">, "")
                 :gsub("</a>", "").."\n"
    end
    
    local count = 0
    local text = ""
    
    while true do
      line = stream:read("*l")
      if not line then break end
      if line:find("^%s*==.*==%s*$") then
        count = count + 1
        if count == 6 then
          break
        end
        text = text .. (count == 1 and "" or "\n") .. totext(line)
      elseif not line:find("^%s*$") then
        text = text .. totext(line)
      end
    end

    io.close(stream)
    
    stream = io.open("../changes.lua", "w")
    if stream then
      stream:write(("QuestHelper_ChangeLog=%q\n"):format(text))
      io.close(stream) 
    else
      print("Error writing ../changes.lua")
    end
  else
    print("Error opening ../changes.txt")
  end
end

if external then

  --print("Updating Astrolabe.")
  --FileUtil.updateSVNRepo("http://svn.esamynn.org/astrolabe/branches/wotlk_data_temp", "../Astrolabe")
  print("Updating ChatThrottleLib.")
  FileUtil.updateSVNRepo("svn://svn.wowace.com/wow/chatthrottlelib/mainline/trunk", "../ChatThrottleLib")
end

if compile then
  local function saveCache()
    local stream = io.open("build-cache.lua", "w")
    local buffer, prebuf = CreateBuffer(), CreateBuffer()
    DumpVariable(buffer, prebuf, cache, "cache")
    stream:write(DumpingComplete(buffer, prebuf))
    io.close(stream)
  end
  
  local function QuestHelper_IsCorrupted(data)
    if type(data.QuestHelper_Objectives) == "table" then for version, package in pairs(data.QuestHelper_Objectives) do
      if AuthorizedVersion(version) and type(package) == "table" then for category, objectives in pairs(package) do
        if type(objectives) == "table" and PreWrath(version) then for name, objective in pairs(objectives) do
          if type(objective) == "table" and objective.pos and type(objective.pos) == "table" then for i, pos in pairs(objective.pos) do
            if pos[1] and pos[1] >= 65 then
              print("SOMETHING IS SERIOUSLY WRONG, found Wrath coordinates in non-Wrath files (version " .. version .. ", continent " .. pos[1] .. ")")
              return true
            end
          end end
        end end
      end end
    end end
  end
  
  -- Download the latest copy of the translated item/npc names.
  if external then
    os.execute("wget http://smariot.hopto.org/wowdata.7z -N")
    
    if FileUtil.fileExists("wowdata.7z") then
      local hash = FileUtil.fileHash("wowdata.7z")
      if cache.wowdata_hash ~= hash then
        -- If the archive has changed, extract the lua file from the archive.
        cache.wowdata_hash = hash
        os.execute("7z e -y wowdata.7z wowdata.lua")
      end
    end
  end
  
  if FileUtil.fileExists("wowdata.lua") then
    loadfile("wowdata.lua")()
  end

  local all_input_files, unknown_input_files = {}, {}

  local since_last_save = 0

  FileUtil.forEachFile("LocalInput", function (name)
    if FileUtil.extension(name) == "lua" or 
       FileUtil.extension(name) == "bak" then
       
      local hash = FileUtil.fileHash(name)
      if cache.ignored[hash] then return end

      if since_last_save == 100 then
        print("Collecting garbage and saving . . .")
        collectgarbage("collect")
        saveCache()
        since_last_save = 0
      end
      since_last_save = since_last_save + 1
    
      cache.ignored[hash] = true
      
      local input = loadfile(name)
      if input then
        local data = {}
        setfenv(input, data)
        if pcall(input) then
          if not (data.QuestHelper_Locale and data.QuestHelper_Objectives) then
            print("! "..name.." isn't a QuestHelper SavedVariables file.")
            return
          end
          
          local upgradable_data = {}
          setfenv(input, upgradable_data)
          input()
          QuestHelper_UpgradeDatabase(upgradable_data)
          if QuestHelper_IsPolluted(upgradable_data) then
            print("!! "..name.." is polluted")
            return
          end
          if QuestHelper_IsCorrupted(upgradable_data) then
            print("!! "..name.." is corrupted")
            return
          end
          if not upgradable_data.QuestHelper_UID then
            print("!! "..name.." has no UID")
            return
          end
          
          local tempname = os.tmpname()
          local stream = io.open(tempname, "w")
          if stream then
            print("Copying/Sorting "..name)
            stream:write(ScanAndDumpVariable(data, nil, true) or "")
            io.close(stream)
            hash = FileUtil.fileHash(tempname)
            if hash then
              local input_name = "Input/"..hash..".lua"
              if not cache.removed[input_name] then
                if not cache.known[input_name] then
                  FileUtil.copyFile(tempname, input_name)
                  unknown_input_files[input_name] = name
                else
                  cache.known[input_name] = name
                end
              else
                cache.removed[input_name] = name
              end
            else
              print("!!! Can't get hash of "..tempname..", for "..name)
            end
            FileUtil.unlinkFile(tempname)
          end
        else
          print("!!! "..name.." couldn't be executed.")
        end
      else
        print("!!! "..name.." couldn't be loaded.")
      end
    end
  end)

  collectgarbage("collect")
  saveCache()
  
  FileUtil.forEachFile("Input", function (name)
    if cache.removed[name] then
      print("!!! Obsolete: ", cache.removed[name].." ("..name..")")
      os.remove(name)
    else
      if not cache.known[name] then
        unknown_input_files[name] = unknown_input_files[name] or name
      end
      
      all_input_files[name] = cache.known[name] or unknown_input_files[name]
    end
  end)

  local function ProcessObjective(category, name, objective, result)
    local istring = "obj."..category.."."..name
    
    if category ~= "item" then
      local seen = 0
      if objective.pos then for i, pos in pairs(objective.pos) do
        seen = seen + pos[4]
      end end
      
      result[istring..".seen"] = (result[istring..".seen"] or 0) + seen
    end
    
    if objective.vendor then
      result[istring..".vend"] = (result[istring..".vend"] or 0) + #objective.vendor
    end
    
    if objective.drop then for monster, count in pairs(objective.drop) do
      result[istring] = (result[istring] or 0) + count
    end end
  end

  local function ProcessQuest(faction, level, name, quest, result)
    local qstring = "quest."..faction.."."..level.."."..name
    result[qstring] = (result[qstring] or 0)+((quest.finish or quest.pos) and 1 or 0)
    
    if quest.item then for item_name, data in pairs(quest.item) do
      ProcessObjective("item", item_name, data, result)
    end end
    
    if quest.alt then for _, quest2 in pairs(quest.alt) do
      ProcessQuest(faction, level, name, quest2, result)
    end end
  end
  
  local function LoadFile(file)
    local data = loadfile(file)
    local result = {}
    if data then
      local loaded = {}
      if not pcall(setfenv(data, loaded)) then
        print("!!!!! oh god something is wrong "..file)
        return
      end
      	 
      data()
      
      QuestHelper_UpgradeDatabase(loaded)
      
      if loaded.QuestHelper_UID then
        result.uid = loaded.QuestHelper_UID
        result.time = loaded.QuestHelper_SaveDate
      else
        if type(loaded.QuestHelper_Quests) == "table" then for version, package in pairs(loaded.QuestHelper_Quests) do
          if AuthorizedVersion(version) and type(package) == "table" then for faction, levels in pairs(package) do
            if type(levels) == "table" then for level, quest_list in pairs(levels) do
              if type(quest_list) == "table" then for name, quest in pairs(quest_list) do
                ProcessQuest(faction, level, name, quest, result)
              end end
            end end
          end end
        end end
        
        if type(loaded.QuestHelper_Objectives) == "table" then for version, package in pairs(loaded.QuestHelper_Objectives) do
          if AuthorizedVersion(version) and type(package) == "table" then for faction, levels in pairs(package) do
            if type(objectives) == "table" then for name, objective in pairs(objectives) do
              ProcessObjective(category, name, objective, result)
            end end
          end end
        end end
      end
    end
    
    return result
  end

  local function ObsoletedBy(data1, data2)
    if data1.uid or data2.uid then
      return data1.loc == data2.loc and data1.uid == data2.uid and (data1.time or 0) >= (data2.time or 0)
    end
    
    for key, value in pairs(data1) do
      local value2 = data2[key]
      if value2 == nil or value2 < value then
        return false
      end
    end
    return true
  end

  local checked = {}
  local file_data = {}
  
  -- This entire mess is built to find obsolete files and remove them.
  for new_name, original_name in pairs(unknown_input_files) do
    print("Checking: ", original_name)
    local data = file_data[new_name]
    if not data then
      data = LoadFile(new_name)
      file_data[new_name] = data
    end
    cache.known[new_name] = original_name
    checked[new_name] = true
    
    if data then
      local uid, last_save = data.uid, data.time
      
      if uid then
        local existing = cache.uid[uid]
        if not existing then
          cache.uid[uid] = {file=new_name, save=last_save}
          file2uid[new_name] = uid
        else
          if existing.save >= last_save then
            print("!!! Obsolete: ", original_name)
            print("!!!       By: ", all_input_files[existing.file])
            print("")
            os.remove(new_name)
            file_data[new_name] = nil
            all_input_files[new_name] = nil
            cache.removed[new_name] = original_name
            cache.known[new_name] = nil
            unknown_input_files[new_name] = nil
          else
            print("!!! Obsolete: ", all_input_files[existing.file])
            print("!!!       By: ", original_name)
            print("")
            
            os.remove(existing.file)
            file_data[existing.file] = nil
            file2uid[existing.file] = nil
            file2uid[new_name] = uid
            cache.removed[existing.file] = all_input_files[existing.file]
            all_input_files[existing.file] = nil
            cache.known[existing.file] = nil
            existing.file = new_name
          end
        end
      else
        for existing_name, existing_original_name in pairs(all_input_files) do
          if not checked[existing_name] and not file2uid[existing_name] then
            local data2 = file_data[existing_name]
            if not data2 then
              data2 = LoadFile(existing_name)
              file_data[existing_name] = data2
            end
            
            if data2 and not data2.uid then
              if ObsoletedBy(data, data2) then
                print("!!! Obsolete: ", original_name)
                print("!!!       By: ", existing_original_name)
                print("")
                
                os.remove(new_name)
                file_data[new_name] = nil
                all_input_files[new_name] = nil
                cache.removed[new_name] = original_name
                cache.known[new_name] = nil
                unknown_input_files[new_name] = nil
                break
              elseif ObsoletedBy(data2, data) then
                print("!!! Obsolete: ", existing_original_name)
                print("!!!       By: ", original_name)
                print("")
                
                os.remove(existing_name)
                file_data[existing_name] = nil
                all_input_files[existing_name] = nil
                cache.removed[existing_name] = existing_original_name
                cache.known[existing_name] = nil
                unknown_input_files[existing_name] = nil
              end
            end
          end
        end
      end
    end
  end
  
  checked, file_data = nil, nil
  
  saveCache()
  collectgarbage("collect")

  --print("Compiling Lightheaded/eql3 data. . .")
  --ProcessExternal()
  
  local total_count = 0
  local counter = 0
  local pairfrequencies = {}
  for name, origin in pairs(all_input_files) do
    total_count = total_count + 1       -- I fuckin' hate Lua
  end
  for name, origin in pairs(all_input_files) do
    counter = counter + 1
    print("Compiling " .. counter .. "/" .. total_count .. ": ", origin)
    --CompileInputFile(name)
    local ret, msg = pcall(CompileInputFile, name, pairfrequencies)
    if not ret then
      print("!!!!! FAILURE")
      print(msg)
    end
  end
  
  print("Processing final data")
  local finaldata = CompileFinish()
  
  local finalstatic = io.open("../static.lua", "w")
  finalstatic:write("QuestHelper_File[\"static.lua\"] = \"Development Version\"\n")
  finalstatic:write("QuestHelper_Loadtime[\"static.lua\"] = GetTime()\n")
  finalstatic:write("QuestHelper_StaticData={")
  
  for k, v in pairs(finaldata) do
    collectgarbage("collect")
    local foloc = string.format("static_%s.lua", k)
    local finalout = "../" .. foloc
    local tempout = finalout
    if condense then tempout = string.format("static_%s.large", k) end
    
    print("Writing: " .. tempout)
    local stream = io.open(tempout, "w")
    stream:write(string.format("QuestHelper_File[\"%s\"] = \"Development Version\"\n", foloc))
    stream:write(string.format("QuestHelper_Loadtime[\"%s\"] = GetTime()\n", foloc))
    stream:write(string.format("if GetLocale() ~= \"%s\" then return end\n", k))  -- wellp
    stream:write(ScanAndDumpVariable(v, string.format("QuestHelper_StaticData_%s", k)))
    io.close(stream)
    
    if condense then
      print("Condensing " .. finalout)
      assert(os.execute(string.format("lua LuaSrcDiet.lua --maximum %s -o %s", tempout, finalout)) ~= -1)
      if false then
        local data_loader = loadfile("LuaSrcDiet.lua")
        local data = {arg={"--maximum", tempout, "-o", finalout}, TEST=true, string=string, print=print, table=table, ipairs=ipairs, error=error, io=io, tonumber=tonumber --[[ assert=assert, FileUtil=FileUtil, tostring=tostring ]]}  -- there has to be a better way to do this
        setfenv(data_loader, data)
        data_loader()
        data.main()
      end
    end
    
    finalstatic:write(string.format("  %s=QuestHelper_StaticData_%s,", k, k))
    --assert(FileUtil.fileContains("../QuestHelper.toc", foloc), "didn't contain " .. foloc)
  end
  
  finalstatic:write("}")
  io.close(finalstatic)
  
  local qhwowv = {}
  local qhfrequencies = {}
  local wowfrequencies = {}
  
  for k, v in pairs(pairfrequencies) do
    table.insert(qhwowv, {freq = v, tag = k})
    local qh, wow = SplitVersion(k)
    qhfrequencies[qh] = (qhfrequencies[qh] or 0) + v
    wowfrequencies[wow] = (wowfrequencies[wow] or 0) + v
  end
  
  local qhv = {}
  local wowv = {}
  
  for k, v in pairs(qhfrequencies) do table.insert(qhv, {freq = v, tag = k}) end
  for k, v in pairs(wowfrequencies) do table.insert(wowv, {freq = v, tag = k}) end
  
  table.sort(qhwowv, function (a, b) return a.freq < b.freq end)
  table.sort(qhv, function (a, b) return a.freq < b.freq end)
  table.sort(wowv, function (a, b) return a.freq < b.freq end)

  for k, v in pairs(qhwowv) do
    print(string.format("%d: %s", v.freq, v.tag))
  end
  print("")
  for k, v in pairs(qhv) do
    print(string.format("%d: %s", v.freq, v.tag))
  end
  print("")
  for k, v in pairs(wowv) do
    print(string.format("%d: %s", v.freq, v.tag))
  end
elseif not FileUtil.fileExists("../static.lua") then
  print("../static.lua doesn't exist; you can't skip the compile step.")
  return 1
end

if icons then
  print("Creating: Icons.tga")
  --if not FileUtil.fileExists("../Art/Icons.tga") then
  --  print("You'll need to manually create Art/Icons.tga, ImageMagick's SVG support seems to have been broken recently.")
  --end
  FileUtil.convertImage("Data/art.svg", "../Art/Icons.tga")
end

local version_string = "UNKNOWN"

if archive_zip or archive_7z then
  FileUtil.unlinkDirectory("QuestHelper")
  
  FileUtil.createDirectory("QuestHelper")
  FileUtil.createDirectory("QuestHelper/Art")
  FileUtil.createDirectory("QuestHelper/Fonts")
  
  local info = nil
  
  -- Try to coax git to give us something to use for the version.
  local stream = io.popen("git describe --tags HEAD", "r")
  if stream then
    info = stream:read("*line")
    if info then
      -- Replace the first dash with a dot.
      info = string.gsub(info, "^(.*)%-(.*)%-g(.*)$", "%1%.%2%-%3", 1)
    end
    io.close(stream)
  end
  
  if not info then
    -- Didn't get a nice looking tag to use, try to at least get a hash for the version.
    stream = io.popen("git-log -1 --pretty=\"format:%2-%h\"", "r")
    if stream then
      info = stream:read("*line")
      io.close(stream)
    end
  end
  
  if not info then
    -- We have no idea what version this is, will use the string already in the TOC.
    info = "%2"
  end
  
  FileUtil.copyFile("../QuestHelper.toc", "QuestHelper", "^(##%s-Version%s-):%s*(.*)%s*$",
    function (a, b)
      version_string = string.gsub(info, "%%2", b) return a..": "..version_string
    end)
  
  local file_version_pattern = "%1"..string.format("%q", version_string)
  
  FileUtil.forEachFile("..", function (file)
    local ext = FileUtil.extension(file)
    if ext == "lua" or ext == "xml" then
      if debug_build then
        FileUtil.copyFile(file, "QuestHelper")
      else
        FileUtil.copyFile(file, "QuestHelper",
                                               "(assert%s*%b())", "--[[ %1 ]]",
                                               "(QuestHelper:Assert%s*%b())", "--[[ %1 ]]",
                                               "(QuestHelper_File%[[^%]]*%]%s*=%s*)\"[^\"]+\"", file_version_pattern)
      end
    end
  end)
  
  FileUtil.forEachFile("../Art", function (file)
    local ext = FileUtil.extension(file)
    if ext == "blp" or ext == "tga" then
      FileUtil.copyFile(file, "QuestHelper/Art")
    end
  end)
  
  FileUtil.forEachFile("../Fonts", function (file)
    local ext = FileUtil.extension(file)
    if ext == "txt" or ext == "ttf" then
      FileUtil.copyFile(file, "QuestHelper/Fonts")
    end
  end)
  
  for i, dir in ipairs({"AstrolabeQH", "ChatThrottleLib", "LibAboutPanel", "lang"}) do
    FileUtil.copyDirectoryRecursively("../"..dir, "QuestHelper/"..dir)
  end
  
  FileUtil.copyFile("../MinimapArrow.tga", "QuestHelper")
  FileUtil.copyFile("../arrow_image.blp", "QuestHelper")
  FileUtil.copyFile("../arrow_image_down.blp", "QuestHelper")
  FileUtil.copyFile("../triangle.tga", "QuestHelper")
  FileUtil.copyFile("../line.tga", "QuestHelper")
  
  if archive_zip then
    local archive = "../QuestHelper-"..version_string..".zip"
    print("Creating "..archive)
    FileUtil.unlinkFile(archive)
    FileUtil.createZipArchive("QuestHelper", archive)
  end
  
  if archive_7z then
    local archive = "../QuestHelper-"..version_string..".7z"
    print("Creating "..archive)
    FileUtil.unlinkFile(archive)
    FileUtil.create7zArchive("QuestHelper", archive)
  end
  
  FileUtil.unlinkDirectory("QuestHelper")
end

print("Done!")

--profiler:stop()
--local outfile = io.open("profile.txt", "w+")
--profiler:report(outfile)
--outfile:close()
