#!/usr/bin/env lua

local compile=true
local external=true
local archive_zip=true
local archive_7z=false

for i, a in ipairs({...}) do
  local mode, option = select(3, string.find(a, "^([%+%-]?)(.*)$"))
  
  mode = mode ~= "-"
  
  if option == "zip" then archive_zip = mode
  elseif option == "7z" then archive_7z = mode
  elseif option == "compile" then compile = mode
  elseif option == "external" then external = mode
  else
    print("Unknown option: "..option)
    return 1
  end
end

cache = {}
local cache_loader = loadfile("build-cache.lua")
if cache_loader then
  cache_loader()
  cache_loader = nil
end

if not cache.removed then cache.removed = {} end
if not cache.known then cache.known = {} end
if not cache.ignored then cache.ignored = {} end
if not cache.uid then cache.uid = {} end

local file2uid = {}
for uid, data in pairs(cache.uid) do file2uid[data.file] = uid end

loadfile("dump.lua")()
loadfile("fileutil.lua")()
loadfile("../upgrade.lua")()
loadfile("compiler.lua")()
--loadfile("external.lua")()

QuestHelper_BuildZoneLookup()

if external then
  print("Updating Astrolabe.")
  FileUtil.updateSVNRepo("http://svn.esamynn.org/astrolabe/trunk", "../Astrolabe")
  print("Updating ChatThrottleLib.")
  FileUtil.updateSVNRepo("http://svn.wowace.com/wowace/trunk/ChatThrottleLib", "../ChatThrottleLib")
end

if compile then
  local function saveCache()
    local stream = io.open("build-cache.lua", "w")
    local buffer, prebuf = CreateBuffer(), CreateBuffer()
    DumpVariable(buffer, prebuf, cache, "cache")
    stream:write(DumpingComplete(buffer, prebuf))
    io.close(stream)
  end
  
  -- Download the latest copy of the translated item/npc names.
  if external then
    os.execute("wget http://smariot.hopto.org/wowdata.7z -N")
    
    if FileUtil.fileExists("wowdata.7z") then
      local hash = FileUtil.fileHash("wowdata.7z")
      if cache.wowdata_hash ~= hash then
        -- If the archive has changed, extract the lua file from the archive.
        cache.wowdata_hash = hash
        os.execute("7z e -y wowdata.7z wowdata.lua")
      end
    end
  end
  
  if FileUtil.fileExists("wowdata.lua") then
    loadfile("wowdata.lua")()
  end

  local all_input_files, unknown_input_files = {}, {}

  FileUtil.forEachFile("LocalInput", function (name)
    if FileUtil.extension(name) == "lua" or 
       FileUtil.extension(name) == "bak" then
      local hash = FileUtil.fileHash(name)
      if cache.ignored[hash] then return end
      cache.ignored[hash] = true
      
      local input = loadfile(name)
      if input then
        local data = {}
        setfenv(input, data)
        if pcall(input) then
          if not (data.QuestHelper_Locale and data.QuestHelper_Objectives) then
            print("! "..name.." isn't a QuestHelper SavedVariables file.")
            return
          end
          
          local tempname = os.tmpname()
          local stream = io.open(tempname, "w")
          if stream then
            print("Copying/Sorting "..name)
            stream:write(ScanAndDumpVariable(data, nil, true) or "")
            io.close(stream)
            hash = FileUtil.fileHash(tempname)
            if hash then
              local input_name = "Input/"..hash..".lua"
              if not cache.removed[input_name] then
                if not cache.known[input_name] then
                  FileUtil.copyFile(tempname, input_name)
                  unknown_input_files[input_name] = name
                else
                  cache.known[input_name] = name
                end
              else
                cache.removed[input_name] = name
              end
            else
              print("!!! Can't get hash of "..tempname..", for "..name)
            end
            FileUtil.unlinkFile(tempname)
          end
        else
          print("!!! "..name.." couldn't be executed.")
        end
      else
        print("!!! "..name.." couldn't be loaded.")
      end
    end
  end)

  FileUtil.forEachFile("Input", function (name)
    if cache.removed[name] then
      print("!!! Obsolete: ", cache.removed[name].." ("..name..")")
      os.remove(name)
    else
      if not cache.known[name] then
        unknown_input_files[name] = unknown_input_files[name] or name
      end
      
      all_input_files[name] = cache.known[name] or unknown_input_files[name]
    end
  end)

  local function ProcessObjective(category, name, objective, result)
    local istring = "obj."..category.."."..name
    
    if category ~= "item" then
      local seen = 0
      if objective.pos then for i, pos in pairs(objective.pos) do
        seen = seen + pos[4]
      end end
      
      result[istring..".seen"] = (result[istring..".seen"] or 0) + seen
    end
    
    if objective.vendor then
      result[istring..".vend"] = (result[istring..".vend"] or 0) + #objective.vendor
    end
    
    if objective.drop then for monster, count in pairs(objective.drop) do
      result[istring] = (result[istring] or 0) + count
    end end
  end

  local function ProcessQuest(faction, level, name, quest, result)
    local qstring = "quest."..faction.."."..level.."."..name
    result[qstring] = (result[qstring] or 0)+((quest.finish or quest.pos) and 1 or 0)
    
    if quest.item then for item_name, data in pairs(quest.item) do
      ProcessObjective("item", item_name, data, result)
    end end
    
    if quest.alt then for _, quest2 in pairs(quest.alt) do
      ProcessQuest(faction, level, name, quest2, result)
    end end
  end

  local function LoadFile(file)
    local data = loadfile(file)
    local result = {}
    if data then
      local loaded = {}
      setfenv(data, loaded)
      data()
      
      QuestHelper_UpgradeDatabase(loaded)
      
      if loaded.QuestHelper_UID then
        result.uid = loaded.QuestHelper_UID
        result.time = loaded.QuestHelper_SaveDate
      else
        if type(loaded.QuestHelper_Quests) == "table" then for faction, levels in pairs(loaded.QuestHelper_Quests) do
          if type(levels) == "table" then for level, quest_list in pairs(levels) do
            if type(quest_list) == "table" then for name, quest in pairs(quest_list) do
              ProcessQuest(faction, level, name, quest, result)
            end end
          end end
        end end
        
        if type(loaded.QuestHelper_Objectives) == "table" then for category, objectives in pairs(loaded.QuestHelper_Objectives) do
          if type(objectives) == "table" then for name, objective in pairs(objectives) do
            ProcessObjective(category, name, objective, result)
          end end
        end end
      end
    end
    
    return result
  end

  local function ObsoletedBy(data1, data2)
    if data1.uid or data2.uid then
      return data1.loc == data2.loc and data1.uid == data2.uid and (data1.time or 0) >= (data2.time or 0)
    end
    
    for key, value in pairs(data1) do
      local value2 = data2[key]
      if value2 == nil or value2 < value then
        return false
      end
    end
    return true
  end

  local checked = {}
  local file_data = {}

  for new_name, original_name in pairs(unknown_input_files) do
    print("Checking: ", original_name)
    local data = file_data[new_name]
    if not data then
      data = LoadFile(new_name)
      file_data[new_name] = data
    end
    cache.known[new_name] = original_name
    checked[new_name] = true
    
    local uid, last_save = data.uid, data.time
    
    if uid then
      local existing = cache.uid[uid]
      if not existing then
        cache.uid[uid] = {file=new_name, save=last_save}
        file2uid[new_name] = uid
      else
        if existing.save >= last_save then
          print("!!! Obsolete: ", original_name)
          print("!!!       By: ", all_input_files[existing.file])
          print("")
          os.remove(new_name)
          file_data[new_name] = nil
          all_input_files[new_name] = nil
          cache.removed[new_name] = original_name
          cache.known[new_name] = nil
          unknown_input_files[new_name] = nil
        else
          print("!!! Obsolete: ", all_input_files[existing.file])
          print("!!!       By: ", original_name)
          print("")
          
          os.remove(existing.file)
          file_data[existing.file] = nil
          file2uid[existing.file] = nil
          file2uid[new_name] = uid
          cache.removed[existing.file] = all_input_files[existing.file]
          all_input_files[existing.file] = nil
          cache.known[existing.file] = nil
          existing.file = new_name
        end
      end
    else
      for existing_name, existing_original_name in pairs(all_input_files) do
        if not checked[existing_name] and not file2uid[existing_name] then
          local data2 = file_data[existing_name]
          if not data2 then
            data2 = LoadFile(existing_name)
            file_data[existing_name] = data2
          end
          
          if not data2.uid then
            if ObsoletedBy(data, data2) then
              print("!!! Obsolete: ", original_name)
              print("!!!       By: ", existing_original_name)
              print("")
              
              os.remove(new_name)
              file_data[new_name] = nil
              all_input_files[new_name] = nil
              cache.removed[new_name] = original_name
              cache.known[new_name] = nil
              unknown_input_files[new_name] = nil
              break
            elseif ObsoletedBy(data2, data) then
              print("!!! Obsolete: ", existing_original_name)
              print("!!!       By: ", original_name)
              print("")
              
              os.remove(existing_name)
              file_data[existing_name] = nil
              all_input_files[existing_name] = nil
              cache.removed[existing_name] = existing_original_name
              cache.known[existing_name] = nil
              unknown_input_files[existing_name] = nil
            end
          end
        end
      end
    end
  end

  checked, file_data = nil, nil

  saveCache()

  --print("Compiling Lightheaded/eql3 data. . .")
  --ProcessExternal()

  for name, origin in pairs(all_input_files) do
    print("Compiling: ", origin)
    CompileInputFile(name)
  end

  print("Writing: ../static.lua")

  local stream = io.open("../static.lua", "w")
  stream:write(ScanAndDumpVariable(CompileFinish(), "QuestHelper_StaticData"))
  io.close(stream)
elseif not FileUtil.fileExists("../static.lua") then
  print("../static.lua doesn't exist; you can't skip the compile step.")
  return 1
end

print("Creating: Icons.tga")
if not FileUtil.fileExists("../Art/Icons.tga") then
  print("You'll need to manually create Art/Icons.tga, ImageMagick's SVG support seems to have been broken recently.")
end
--FileUtil.convertImage("Data/art.svg", "../Art/Icons.tga")

if archive_zip or archive_7z then
  FileUtil.unlinkDirectory("QuestHelper")
  
  FileUtil.createDirectory("QuestHelper")
  FileUtil.createDirectory("QuestHelper/Art")
  FileUtil.createDirectory("QuestHelper/Astrolabe")
  FileUtil.createDirectory("QuestHelper/ChatThrottleLib")
  
  FileUtil.forEachFile("..", function (file)
    local ext = FileUtil.extension(file)
    if ext == "lua" then
      FileUtil.copyFile(file, "QuestHelper")
    elseif ext == "toc" then
      -- Modify the version to include the date and hash of the most recent commit.
      
      local info = nil
      local stream = io.popen("git-log -1 --pretty=\"format:, %h, %ai\"", "r")
      if stream then
        info = stream:read("*line")
        io.close(stream)
      end
      
      FileUtil.copyFile(file, "QuestHelper", "^(##%s-Version%s-:.*)$", "%1"..(info or ", unknown revision"))
    end
  end)
  
  FileUtil.forEachFile("../Art", function (file)
    local ext = FileUtil.extension(file)
    if ext == "blp" or ext == "tga" then
      FileUtil.copyFile(file, "QuestHelper/Art")
    end
  end)
  
  for i, dir in ipairs({"Astrolabe", "ChatThrottleLib"}) do
    FileUtil.forEachFile("../"..dir, function (file)
      FileUtil.copyFile(file, "QuestHelper/"..dir)
    end)
  end
  
  if archive_zip then
    print("Creating QuestHelper.zip")
    FileUtil.unlinkFile("../QuestHelper.zip")
    FileUtil.createZipArchive("QuestHelper", "../QuestHelper.zip")
  end
  
  if archive_7z then
    print("Creating QuestHelper.7z")
    FileUtil.unlinkFile("../QuestHelper.7z")
    FileUtil.create7zArchive("QuestHelper", "../QuestHelper.7z")
  end
  
  FileUtil.unlinkDirectory("QuestHelper")
end

print("Done!")
