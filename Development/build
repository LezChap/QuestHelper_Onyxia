#!/usr/bin/env lua

cache = {}
local cache_loader = loadfile("build-cache.lua")
if cache_loader then
  cache_loader()
  cache_loader = nil
end

if not cache.removed then cache.removed = {} end
if not cache.known then cache.known = {} end

loadfile("dump.lua")()
loadfile("../upgrade.lua")()
loadfile("compiler.lua")()

local function saveCache()
  local stream = io.open("build-cache.lua", "w")
  local buffer, prebuf = CreateBuffer(), CreateBuffer()
  DumpVariable(buffer, prebuf, cache, "cache")
  stream:write(DumpingComplete(buffer, prebuf))
  io.close(stream)
end

--[[ Note:
     
     fileHash and forEachFile will probably need replacements for other operating systems. ]]

--[[ Warning:
     
     Pretty much all these functions can be made to do something malicious if given bad file names;
     don't use input from untrusted sources. ]]

local function fileHash(filename)
  local stream = io.popen(string.format("sha1sum %q", filename))
  local line = stream:read()
  io.close(stream)
  if line then
    return select(3, string.find(line, "^([abcdef%d]+)  "..filename.."$"))
  end
end

local function fileExists(filename)
  local stream = io.open(filename, "r")
  if stream then
    local exists = stream:read() ~= nil
    io.close(stream)
    return exists
  end
  return false
end

local function copyFile(in_name, out_name)
  if in_name ~= out_name then
    local in_stream, out_stream = io.open(in_name, "r"), io.open(out_name, "w")
    out_stream:write(in_stream:read("*a"))
    io.close(in_stream)
    io.close(out_stream)
  end
end

local function forEachFile(directory, func)
  local stream = io.popen(string.format("ls -f1 %q", directory))
  if not stream then stream = io.popen(string.format("DIR //B %q", directory)) end
  
  if stream then
    while true do
      local filename = stream:read()
      if not filename then break end
      filename = directory.."/"..filename
      if string.sub(filename, 1, 1) ~= "." and fileExists(filename) then
        func(filename)
      end
    end

    io.close(stream)
  end
end

local all_input_files, unknown_input_files = {}, {}

forEachFile("LocalInput", function (name)
  local hash = fileHash(name)
  if hash then
    local input_name = "Input/"..hash..".lua"
    if not cache.removed[input_name] then
      if not cache.known[input_name] then
        copyFile(name, input_name)
        unknown_input_files[input_name] = name
      else
        cache.known[input_name] = name
      end
    else
      cache.removed[input_name] = name
    end
  else
    print("Can't get hash of "..name)
  end
end)

forEachFile("Input", function (name)
  if cache.removed[name] then
    print("!!! Obsolete: ", cache.removed[name].." ("..name..")")
    os.remove(name)
  else
    if not cache.known[name] then
      unknown_input_files[name] = unknown_input_files[name] or name
    end
    
    all_input_files[name] = cache.known[name] or unknown_input_files[name]
  end
end)

local function ProcessObjective(category, name, objective, result)
  local istring = "obj."..category.."."..name
  
  if category ~= "item" then
    local seen = 0
    if objective.pos then for i, pos in pairs(objective.pos) do
      seen = seen + pos[5]
    end end
    
    result[istring..".seen"] = (result[istring..".seen"] or 0) + seen
  end
  
  if objective.vendor then
    result[istring..".vend"] = (result[istring..".vend"] or 0) + #objective.vendor
  end
  
  if objective.drop then for monster, count in pairs(objective.drop) do
    result[istring] = (result[istring] or 0) + count
  end end
end

local function ProcessQuest(faction, level, name, quest, result)
  local qstring = "quest."..faction.."."..level.."."..name
  result[qstring] = (result[qstring] or 0)+((quest.finish or quest.pos) and 1 or 0)
  
  if quest.item then for item_name, data in pairs(quest.item) do
    ProcessObjective("item", item_name, data, result)
  end end
  
  if quest.alt then for _, quest2 in pairs(quest.alt) do
    ProcessQuest(faction, level, name, quest2, result)
  end end
end

local function LoadFile(file)
  local data = loadfile(file)
  local result = {}
  if data then
    local loaded = {}
    setfenv(data, loaded)
    data()
    
    if type(loaded.QuestHelper_Quests) == "table" then for faction, levels in pairs(loaded.QuestHelper_Quests) do
      if type(levels) == "table" then for level, quest_list in pairs(levels) do
        if type(quest_list) == "table" then for name, quest in pairs(quest_list) do
          ProcessQuest(faction, level, name, quest, result)
        end end
      end end
    end end
    
    if type(loaded.QuestHelper_Objectives) == "table" then for category, objectives in pairs(loaded.QuestHelper_Objectives) do
      if type(objectives) == "table" then for name, objective in pairs(objectives) do
        ProcessObjective(category, name, objective, result)
      end end
    end end
  end
  
  return result
end

local function ObsoletedBy(data1, data2)
  for key, value in pairs(data1) do
    local value2 = data2[key]
    if value2 == nil or value2 < value then
      return false
    end
  end
  return true
end

local checked = {}

for new_name in pairs(unknown_input_files) do
  print("Checking: ", unknown_input_files[new_name])
  local data = LoadFile(new_name)
  cache.known[new_name] = 1
  checked[new_name] = true
  for existing_name in pairs(all_input_files) do
    if not checked[existing_name] then
      local data2 = LoadFile(existing_name)
      if ObsoletedBy(data, data2) then
        print("!!! Obsolete: ", unknown_input_files[new_name])
        print("!!!       By: ", all_input_files[existing_name])
        print("")
        
        os.remove(new_name)
        all_input_files[new_name] = nil
        cache.removed[new_name] = unknown_input_files[new_name]
        cache.known[new_name] = nil
        unknown_input_files[new_name] = nil
        break
      elseif ObsoletedBy(data2, data) then
        print("!!! Obsolete: ", all_input_files[existing_name])
        print("!!!       By: ", unknown_input_files[new_name])
        print("")
        
        os.remove(existing_name)
        all_input_files[existing_name] = nil
        cache.removed[existing_name] = all_input_files[existing_name]
        cache.known[existing_name] = nil
        unknown_input_files[existing_name] = nil
      end
    end
  end
end

saveCache()

for name, origin in pairs(all_input_files) do
  print("Compiling: ", origin)
  CompileInputFile(name)
end

print("Writing: ../static.lua")

local stream = io.open("../static.lua", "w")
stream:write(ScanAndDumpVariable(CompileFinish(), "QuestHelper_StaticData"))
io.close(stream)

print("Done!")
