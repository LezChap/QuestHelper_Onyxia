#!/usr/bin/env lua

loadfile("dump.lua")()
loadfile("xml.lua")()
loadfile("fileutil.lua")()

local base_directory = "~/QuestHelper-SpiderData"

function searchFile(file, str)
  local stream = io.popen(string.format("grep %s -ce %s", FileUtil.quoteFile(file), FileUtil.quoteFile(str)))
  if stream then
    local number = tonumber(stream:read())
    io.close(stream)
    return number or 0
  end
  return 0
end

function fileType(file)
  local stream = io.popen(string.format("file -bi %s", FileUtil.quoteFile(file)))
  if stream then
    local filetype = stream:read()
    io.close(stream)
    return filetype or "unknown"
  end
  
  return "unknown"
end

local WoWData =
 {
  quest = {},
  item = {},
  npc = {}
 }

local wd_loader = loadfile("External/wowdata.lua")

if wd_loader then
  print("Loading old data.")
  local env = {}
  setfenv(wd_loader, env)
  wd_loader()
  wd_loader = nil
  
  WoWData = env.WoWData or WoWData
end

local function save()
  local stream = io.open("External/wowdata.lua", "w")
  local buffer, prebuf = CreateBuffer(), CreateBuffer()
  DumpVariable(buffer, prebuf, WoWData, "WoWData")
  stream:write(DumpingComplete(buffer, prebuf))
  io.close(stream)
end

function getQuest(id)
  local q = WoWData.quest[id]
  if not q then q = {name={},hash={},faction={}} WoWData.quest[id] = q end
  return q
end

function getNPC(id)
  local n = WoWData.npc[id]
  if not n then n = {name={}} WoWData.npc[id] = n end
  return n
end

function getItem(id)
  local i = WoWData.item[id]
  if not i then i = {name={}} WoWData.item[id] = i end
  return i
end

function doTag(tag)
  if tag == "br /" then return "\n" end
  print("Unknown Tag: "..tag)
end

function doEntity(entity)
  if tag == "amp" then return "&" end
  if tag == "lt" then return "<" end
  if tag == "gt" then return ">" end
  print("Unknown Entity: "..tag)
end

function htmlToText(input)
  return string.gsub(string.gsub(input, "<(.-)>", doTag), "&(.-);", doEntity)
end

function preFix(str, pre)
  if str then
    while true do
      local t = select(3, string.find(str, pre))
      if t then
        str = t
      else break end
    end
  end
  return str
end

function hashString(text)
  -- Computes an Adler-32 checksum.
  local a, b = 1, 0
  for i=1,string.len(text) do
    a = (a+string.byte(text,i))%65521
    b = (b+a)%65521
  end
  return b*65536+a
end

function downloadItems()
  local index = 1
  local failures = 0
  local map = {de ="deDE", en = "enUS", es = "esES", fr = "frFR", ko="koKR", zh="zhCN"}
  
  FileUtil.createDirectory(base_directory)
  FileUtil.createDirectory(base_directory.."/items")
  
  while failures < 256 do
    local failed = true
    
    print(index)
    
    local destfile = base_directory.."/items/"..index
    
    if (FileUtil.fileExists(destfile) or
        os.execute(string.format("wget %s -q -N -O %s",
                                 FileUtil.quoteFile("http://www.wowguru.com/db/syndicate/items/id"..index..".xml"),
                                 FileUtil.quoteFile(destfile))) == 0) and fileType(destfile) == "text/xml" then
      local xml = XMLtoLUA(destfile)
      
      if xml.item and xml.item.translations then
        local i = getItem(index)
        if xml.item.translations then
          local t = xml.item.translations
          for t, x in pairs(xml.item.translations) do
            if x.value then
              print(index, map[t], x.value)
              i.name[map[t]] = x.value
            end
          end
        end
        
        failed = false
      end
    end
    
    if not failed then
      failures = 0
    else
      failures = failures + 1
    end
    
    index = index + 1
  end
end

function downloadNPCs()
  local index = 1
  local failures = 0
  local map = {
               deDE = "http://de.wowguru.com/db/syndicate/mobs/id%d.xml",
               enUS = "http://www.wowguru.com/db/syndicate/mobs/id%d.xml",
               frFR = "http://fr.wowguru.com/db/syndicate/mobs/id%d.xml",
               koKR = "http://ko.wowguru.com/db/syndicate/mobs/id%d.xml",
               zhCN = "http://zh.wowguru.com/db/syndicate/mobs/id%d.xml",
               esES = "http://es.wowguru.com/db/syndicate/mobs/id%d.xml"
              }
  
  FileUtil.createDirectory(base_directory)
  FileUtil.createDirectory(base_directory.."/npcs")
  for locale in pairs(map) do
    FileUtil.createDirectory(base_directory.."/npcs/"..locale)
  end
  
  while failures < 256 do
    local failed = true
    
    for locale, url_format in pairs(map) do
      local destfile = base_directory.."/npcs/"..locale.."/"..index
      
      if (FileUtil.fileExists(destfile) or
          os.execute(string.format("wget %s -q -N -O %s",
                                   FileUtil.quoteFile(string.format(url_format, index)),
                                   FileUtil.quoteFile(destfile))) == 0) and fileType(destfile) == "text/xml" then
        local xml = XMLtoLUA(destfile)
        
        if xml.mob and type(xml.mob.name) == "string" then
          local npc = getNPC(index)
          
          print(index, locale, xml.mob.name)
          
          npc.name[locale] = xml.mob.name
          
          failed = false
        end
      end
    end
    
    if not failed then
      failures = 0
    else
      failures = failures + 1
    end
    
    index = index + 1
  end
end

function downloadQuests()
  local index = 1
  local failures = 0
  local map = {
               enUS = "http://www.wowguru.com/db/quests/id%d/",
               frFR = "http://fr.wowguru.com/db/quests/id%d/",
               esES = "http://es.wowguru.com/db/quests/id%d/",
               deDE = "http://de.wowguru.com/db/quests/id%d/",
               zhCN = "http://zh.wowguru.com/db/quests/id%d/",
               koKR = "http://ko.wowguru.com/db/quests/id%d/"
              }
  
  FileUtil.createDirectory(base_directory)
  FileUtil.createDirectory(base_directory.."/quests")
  for locale in pairs(map) do
    FileUtil.createDirectory(base_directory.."/quests/"..locale)
  end
  
  while failures < 256 do
    local failed = true
    
    for locale, url_format in pairs(map) do
      local destfile = base_directory.."/quests/"..locale.."/"..index
      
      if (FileUtil.fileExists(destfile) or
          os.execute(string.format("wget %s -q -N -O %s",
                                   FileUtil.quoteFile(string.format(url_format, index)),
                                   FileUtil.quoteFile(destfile))) == 0) and searchFile(destfile, "<td id=\"filecontent\">") > 0 then
        local file = io.open(FileUtil.fileName(destfile), "r")
        if file then
          local data = correctText(file:read("*a"))
          io.close(file)
          
          local name, desc, req, faction, level, begin_index, begin_name, ends_index, end_name
          name, data = select(3, string.find(data, "</h3><h3>%s*([^\n]-)%s*</h3>(.*)"))
          desc, data = select(3, string.find(data or "", "<h2>.-</h2>%s*<blockquote>%s*(.-)%s*</blockquote>(.*)"))
          req, data = select(3, string.find(data or "", "<h2>.-</h2>%s*<blockquote>%s*(.-)%s*</blockquote>(.*)"))
          
          local obj_table, data2 = select(3, string.find(data or "", "^%s-<table>(.-)</table>(.*)"))
          data = data2 or data
          
          if obj_table then
            string.gsub(obj_table, "<a href=\"/db/(.-)/.-%-id(%d-)\">%s-(.-)%s-</a>", function (t, index, name)
              index = tonumber(index)
              if index and name ~= "" then
                if t == "items" then
                  local i = getItem(index)
                  i.quest = true
                  i.name[locale] = i.name[locale] or name
                  print("QUEST ITEM: "..name)
                elseif t == "mobs" then
                  local n = getNPC(index)
                  n.quest = true
                  n.name[locale] = n.name[locale] or name
                  print("QUEST_MONSTER: "..name)
                end
              end
            end)
          end
          
          faction = preFix(select(3, string.find(data or "", ">([^\n]-)</div><strong>Faction")), ">(.*)")
          level = tonumber(preFix(select(3, string.find(data or "", ">([^\n]-)</div><strong>Level")), ">(.*)"))
          
          local chunk = preFix(select(3, string.find(data or "", "href=\"(.-)</a></div><strong>Begins")), "href=\"(.*)")
          begin_id = tonumber(preFix(select(3, string.find(chunk or "", "-id([%d]+)\"")), "-id(.*)"))
          begin_name = preFix(select(3, string.find(chunk or "", ">([^\n]+)$")), ">(.*)")
          chunk = preFix(select(3, string.find(data or "", "href=\"(.-)</a></div><strong>Ends")), "href=\"(.*)")
          end_id = tonumber(preFix(select(3, string.find(chunk or "", "-id([%d]+)\"")), "-id(.*)"))
          end_name = preFix(select(3, string.find(chunk or "", ">([^\n]+)$")), ">(.*)")
          
          chunk = select(3, string.find(data or "", "<ol>(.-)</ol>"))
          
          if chunk then
            local map = {}
            local pos = 1
            string.gsub(chunk, "<li(.-)</li>", function (chunk)
              local id = select(3, string.find(chunk, "%[%d+%].-%-id(%d+)/"))
              id = tonumber(id)
              
              if id then
                map[pos] = id
                pos = pos + 1
              end
            end)

            
            for i = 1,#map-1 do
              local before = getQuest(i)
              local after = getQuest(i+1)
              
              local before_id, after_id = map[i], map[i+1]
              
              if before_id and after_id then
                before.next = after_id
                after.prev = before_id
              end
            end
          end
          
          print()
          
          print("--- Quest "..locale.."/"..index.." ---")
          print("NAME:    "..htmlToText(name or "???"))
          print("DESC:    "..htmlToText(desc or "???"))
          print("REQ:     "..htmlToText(req or "???"))
          print("FACTION: "..htmlToText(faction or "???"))
          print("LEVEL:   "..(level or "???"))
          print("BEGIN:   "..htmlToText((begin_name or "???").." (#"..(begin_id or "???")..")"))
          print("END:     "..htmlToText((end_name or "???").." (#"..(end_id or "???")..")"))
          
          if name and name ~= "" and level then
            local q = getQuest(index)
            q.name[locale] = name
            q.level = level
            if req then q.hash[locale] = hashString(req) end
            
            if faction == "Alliance" then
              q.faction[1] = true
            elseif faction == "Horde" then
              q.faction[2] = true
            elseif faction == "N/A" then
              -- Don't know who the quest is for, factions will be added if we've seen someone do the quest.
            else
              print("!!!!!!!!!!!", "UNKNOWN FACTION", faction)
              assert(false)
            end
            
            if begin_id and begin_name and begin_name ~= "" then
              local n = getNPC(begin_id)
              n.quest = true
              n.name[locale] = begin_name
              q.begin = begin_id
            end
            
            if end_id and end_name and end_name ~= "" then
              local n = getNPC(end_id)
              n.quest = true
              n.name[locale] = end_name
              q.finish = end_id
            end
            
            failed = false
          end
        end
      end
    end
    
    if not failed then
      failures = 0
    else
      failures = failures + 1
    end
    
    index = index + 1
  end
end

--downloadQuests()
downloadItems()
downloadNPCs()

save()
