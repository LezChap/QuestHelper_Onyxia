#!/usr/bin/env lua

-- Reads comments from lua files and uses them to generate documentation. Why? Because having
-- the documentation in the same location as stuff that's being documented makes life easier.

-- You can probably read this file for examples on how to document stuff.

-- processComment(file, line, comment)
-- file (string) The name of the file the comment came from.
-- line (number) The line number of the file the comment came from.
-- comment (string) The comment that this comment came from.
-- Parses comments to extract information from them.
local function processComment(file, line, comment)
  -- TODO: Parse comments.
  print("--BEGIN COMMENT--\n"..comment.."\n-- END COMMENT --")
end

-- readLuaFile(file)
-- file (string) The name of the file to read.
-- Reads the comments from a file and passes the comments to [processComment]
local function readLuaFile(file)
  local stream = io.open(file, "r")
  
  if not stream then
    print("Unable to open file: "..file)
    return
  end
  
  local comment, comment_line, comment_type
  
  local line_number = 0
  local line_remainder
  
  while true do
    local line
    if line_remainder and line_remainder ~= "" then
      line = line_remainder
      line_remainder = nil
    else
      line_number = line_number + 1
      line = stream:read()
      if not line then break end
    end
    
    if comment and comment_type == 2 then
      local comment_text
      comment_text, line_remainder = select(3, string.find(line, "^%s*(.-)%s*%]%](.*)"))
      
      if comment_text then
        processComment(file, comment_line, comment .. "\n" .. comment_text)
        comment = nil
      else
        comment = comment.. "\n" .. line
      end
    else
      local comment_text = select(3, string.find(line, "^%s*%-%-%[%[%s*(.-)%s*$"))
      
      if comment_text then
        if comment then
          processComment(file, comment_line, comment)
          comment = nil
        end
        
        local short_text
        short_text, line_remainder = select(3, string.find(comment_text, "^(.-)%s*%]%](.*)"))
        
        if short_text then
          processComment(file, line, short_text)
        else
          comment = comment_text
          comment_type = 2
          comment_line = line_number
        end
      else
        comment_text = select(3, string.find(line, "^%s*%-%-%s*(.-)%s*$"))
        if comment_text then
          if comment then
            comment = comment .. "\n" .. comment_text
          else
            comment = comment_text
            comment_type = 1
            comment_line = line_number
          end
        elseif comment then
          processComment(file, comment_line, comment)
          comment = nil
        end
      end
    end
  end
  
  if comment then
    processComment(file, comment_line, comment)
  end
  
  io.close(stream)
end

for i, file in ipairs(arg) do
  readLuaFile(file)
end
