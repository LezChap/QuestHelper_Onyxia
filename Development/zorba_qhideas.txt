

Scarlet Defender cannot be found
prat 3.0 conflict?


Cartographer waypoints scale with Cartographer
More map labels :(
There's some pvp quest in Icecrown that breaks badly, figure that out once you get there? Add a new icon for it also.


"I know this, but it told me that [b]both[/b] quests were completed after [b]6[/b] kills."

Marauders of Darrowshire

* Add some concept of per-user prefs
* /qh level per-user

* Routing recovery
* Fix the flight paths
* Routing infinite-loop test (and kill)
* Build!

* New data storage
* Build!

@ Remember priorities
@ "Too Tough For Me" button

@ See if it can be made faster, re-enable sanity checks on at least some level
* Re-enable asserts in general, ha ha

* Rebuild build system
  * Re-enabled "zero nodes"
  
* Rebuild routing

* BUGS
* Record drops per-instance so we don't think both Kael'Thas'es are the same
* Rig static.lua to break if it doesn't load or has a version mismatch
* Lots of things break when flightpoints are updated. Lots of them.
* Cartographer 3 incompatibility?
* Bug: Full info in Tomtom's waypoint line?
* Bug: The assert check is going to break if the flightpoints are updated. Make this not happen. Actually now that I think about it, I bet updating the flight points is causing a lot of those crashes!
QuestHelper: The Routing Co-Routine just exploded:
Interface\Addons\Questhelper\objective.lua:30: stack overflow
* The only annoying thing I've run into so far is the cartographer arrow not showing up until you do /qh cartwp twice which has always been there. 
* "Hide" does not function properly when entering instances.
* Incompatible with Mapster?

@ Flying mounts
@ Tunable not-in-group penalties
* Build!

* Better data collection - collect more from more people, prompt them to upload once they have a good chunk of data
* Track player paths
* Track quest-item drops only when quest is still unfinished
* Track monster spots in a more specific fashion
* Track quest XP
* Track quest followups?
@ Teleporters functional?
  @ Mage teleport
  @ Druid teleport
  @ Hearthstone?
* Build!

* Bug: QH:ComputeTravelTime is not taking the "last leg" from the zone entry point to the destination into account when doing path optimization
* Bug: AddObjectiveBest is not adding objectives in the best place in any sense of the word
* Bug: Explicit allocation. Seriously. This is a bug. IT IS IDIOTIC. WHY DID YOU DO THIS. WHAT WERE YOU THINKING.
* Bug: Aaaargh wacky custom half-classes with no abstraction (eats own face, dies)

* Bug: ObjectiveTravelTime2 is obviously inconsistent with ComputeTravelTime2, also what the hell is it doing
* Bug: Crash bug on timed quests?

* Flavor: include the name of the boat/zeppelin
* Remove all those wacky random-enchant items from the drop tables
* Switch to GUIDs if we haven't already
* Less reset-pathing-information, seriously wtf
* Show what you should be doing when you're at a flight point

* Better geography and barriers
  * Pick this up automatically after "better data collection"?
* Higher cost for traveling through high-level areas?

* Custom handling for complex quests that QH currently kind of fails on ("collect these items, then use this to combine them, then give it to me" which invariably only gives you the second part at some random place in the world)

* Monster spawn zones should be more obvious, not just a few "go here" spots that you can't see simultaneously without a non-obvious UI feature
* Drop rates for quests

* Quest followups added automatically
* "Quest-like" things
  * Recipes
  * Flight paths
  * Weapon training
  * Skill training
  * Automatic reagent/ammo restocking
  * Repairs
  * Mounts
  * Pick-up dailies?
* Add "get quest"?

* Loose prioritization
* Give some priority to turning in quests
* Tracking "leveling" as part of the route finder (ha ha oh god)
  * Along with training, mounts
  * What the hell let's toss reagents and repairs in here as well :D :D :D

* Separate CPU-usage multiplier for
  * Combat
  * City
  * PvP
  * World
  * Instance

*** Unsorted

* Auto-/target script?
* Track/infer completed quests
* Display more vertically? Is this even possible?



Bug:
Message: ..\AddOns\QuestNav\graph.lua line 185:
attempt to compare nil with number

Message: ..\AddOns\QuestHelper\utility.lua line 190:
bad argument #1 to 'ceil' (number expected, got nil)
Debug:
[C]: ?
[C]: ceil()
QuestHelper\utility.lua:190:
QuestHelper\utility.lua:189
(tail call): ?
QuestHelper\lang.lua:25:
QuestHelper\lang.lua:21
[C]: gsub()
QuestHelper\lang.lua:42:
QuestHelper\lang.lua:40
QuestHelper\lang.lua:85:
QuestHelper\lang.lua:47
(tail call): ?
QuestHelper\flightpath.lua:68: TaxiNodeOnButtonEnter()

Message: ..\AddOns\QuestHelper\dodads.lua line 242:
   attempt to index field 'pos' (a nil value)
Debug:
   [C]: ?
   QuestHelper\dodads.lua:242 GetOverlapObjectives()
   QuestHelper\dodads.lua:441
      QuestHelper\dodads.lua:437

this happens every single time I fly from Azeroth(ironforge) to Outland(quel danas, ghostlands, etc) 

=-=-=-=-=-=

What do we need?
  
* Monsters
  * Locations
  * Levels
  * Loot count
  * Loot, in detail
  * Faction
* Items
  * Lootable flag
  * Disenchantable flag
  * Prospectible flag
  * Ilevel
  * Weapon/armor and weapon/armor subtype
  * Loot, in detail
  * Disenchanting
  * Prospecting
* Objects
  * Locations
  * Loot, in detail
* Events
  * Locations
* Rep gains?
* Quests
  * Levels
  * Start character
  * End character
  * Start/end *location*
  * Items/events involved?
  * Rep gain
  * XP gain
  * Money gain
  * Item rewards
    * Item reward equip testing? vs. spec, class, level
  * Faction
* Flight paths that exist
* Flight path timing
* Zone boundaries
* Subzone boundaries
* Walk paths

QuestHelper_Collector_Version = 1
QuestHelper_Collector = {
  ["0.58 on 1.2.3/enUS"] = {
    ["monster"] = {
      [IDnumber] = {
        -- Standard merger base here
        "DENSDENSDENSDENS",
        "DENSDENSDENS",
        "DENS",
        level_34 = 12,
        level_35 = 99,
        level_36 = 29,
        name_Hello! = 19,
        reaction_4 = 155, -- this is the friendly-hostile stuff
        
        --TODO from here:
        loot_yes = 109,
        loot_no = 12,
        loot_opened = 20,
        loot_items = {
          [itemid] = 4,
          [itemid] = 9,
        }
        skin_yes = 109,
        skin_no = 12,
        skin_opened = 20,
        skin_items = {
        }
        questloots = {
          [itemid] = {4, 8},  -- This only triggers if we know this critter drops a specific bit of loot - in some ways, it overrides the "loots" above
        }
        sells = {
          [itemid] = true,
          [itemid] = amount,
        }
      }
    },
    ["item"] = {
      [IDnumber] = {
        name = "Hello!",
        ilevel = (level),
        minlevel = (level),
        quality = (quality),
        type = "type/subtype",
        equiplocation = "LOC",
        
        --TODO from here:
        loot_yes = 109,
        loot_no = 12,
        loot_opened = 20,
        loot_items = {
          [itemid] = 4,
          [itemid] = 9,
        }
        de_yes = 109,
        de_no = 12,
        de_opened = 20,
        de_items = {
          [itemid] = 4,
          [itemid] = 9,
        }
        looted = 12,
        loots = {
          [itemid] = 4,
          [itemid] = 9,
        }
        equipped = {
          "CLEVSPEC", "CLEVSPEC"
        }
        equipped_no = { "CLEVSPEC", "CLEVSPEC" }
      }
    }
    TODO ["object"] = {
      [IDnumber] = {
        locations = {
          "DENSDENSDENSDENS",
          "DENSDENSDENS",
          "DENS",
        }
        name = "Hello!",
        loot_yes = 109,
        loot_no = 12,
        loot_opened = 20,
        loot_items = {
          [itemid] = 4,
          [itemid] = 9,
        }
        herb_yes = 109,
        herb_no = 12,
        herb_opened = 20,
        herb_items = {
          [itemid] = 4,
          [itemid] = 9,
        }
      }
    }
    TODO ["event"] = {
      [QuestID/String] = {
        locations = {
          "DENSDENSDENS",
        }
      }
    }
    TODO ["reputation"] = {
      [QuestID/String] = {
        locations = {
          "DENSDENSDENS",
        }
      }
    }
    TODO ["quest"] = {
      [QuestID] = {
        name = "Hello!",
        level = 40,
        start = "monster/1234",
        end = "monster/5678",
        start_location = {
          "DENSDENSDENS"
        }
        end_location = {
          "DENSDENSDENS"
        }
        objectives = {
          { "monster/1234" = 12, "monster/4456" = 2 },
          { "item/1234" = 9, },
          { "reputation/1234" = 14, },
        }
        repgain = { faction, amount }
        xpgain = { level, amount }
        moneygain = { level, amount }
        itemgain = { }
        itemchoice = { }
        faction_1_got = 1234
        faction_2_got = 1236
        completedby = { "CLVSPEC", "CLVSPEC" }
      }
    }
    TODO ["flightinstructor"] = {
      ["location"] = monsterid
    }
    TODO ["flighttiming"] = {
      ["src"] = {
        ["dst"] = {
          [hash] = time
        }
      }
    }
    ["zone"] = {
      ["zone@@realzone@@subzone"] = {
        border = {
          "DENSDENS",
          "DENS", -- merged
        }
        update = {
          "DENSDENS",
          "DENS", --merged
        }
        TODO xp = {
          level = "amount"
        }
      }
    }
    ["traveled"] = {
      building = { "decompy" }
      compressing = {}
      done = {
        "COMPCOMPCOMP",
        "COMPCOMPCOMP",
        "COMPCOMPCOMP",
      }
    }
    TODO ["achievement"] = {
      [ID] = {
        objectives = {
          { "monster/1234" = 12, "monster/4456" = 2 },
          { "item/1234" = 9, },
          { "reputation/1234" = 14, },
        }
        previous = (idnumber)
        name_enUS =
        -- Availability should only be tagged for achievements in the static DB, since otherwise it will be heavily biased
        faction_1_avail =
        faction_1_noavail =
      }
    }
    TODO ["history"] = {
      ["uniqueid"] = {
          "level 19",
          "had quest 1234",
          "had quest 1234",
          "completed quest 1234",
          "gained level 20",
          "abandoned quest 1234",
          "received quest 1234",
          "available quests at X, a b c d",
        }, {
          "had quest 1234",
          "had quest 1234",
          "completed quest 1234",
          "abandoned quest 1234",
          "received quest 1234",
        }
      }
    }
  }
}

DENS: ZZXXYY, zone X Y. X and Y: take the value, add 9, divide by 19, bitpack that into three 8-bit values. Gives about 88k points within the standard 1-to-0. Good 'nuff.
COMP: DENS, then a stream of compressed eight direction vectors and a swim bit toggle (starting with the toggle if the user is already swimming) and a fall-damage notifier


Detect "going inside a cave"? Holy crap. I have never considered such a thing before.


---- LET US THINK ABOUT LOOTING

So. A loot window pops up. What's it from?

There's a few options.

* Monster loot
* Skinning, mining, or herbing (or engineering?) (could be either from a monster, or from an entity)
* Using an entity
* Opening a container from inventory
* Fishing
* Pickpocketing

Alternatively, you might just get random things.

* Using an item from inventory (modern clams)
* Talking to a dude (argent dawn?)



Now here's a question. I already have to deal with items showing up in inventory out of nowhere. Is it perhaps better to just hook that, rather than trying to interpret loot windows? Also, what do I do about groups?

I think there's useful info I can get from loot windows, I'll stick with that. This also means that - in general - I don't want to worry about stuff that Simply Appears unless I think the user is actually involved somehow (using item from inventory, talking to a dude.) I'm not all that hugely worried about having to track where warglaives of azzinoth come from, at least for now.


So let's see how I can figure these out:

* Monster loot - Look for events and mouseover. Might not have it targeted, so don't assume they will.
* Skinning, mining, or herbing - All of these are spellcasts, see what the spell is (and what it targets) and what the user has targeted in case it's a monster. Also watch the last mouseover event, or the last tooltip?
* Disenchanting - watch for Disenchant spellcast, look for last tooltip
* Using an entity - Spellcast, again. Watch tooltip for the entity and watch the cast timer?
* Opening a container from inventory - Tooltip, yet again. I think that's the best I can do. Also watch for the "can be opened" text.
* Fishing - IsFishingLoot, and spellcast. At least this one's easy.

Alternatively, you might just get random things.

* Using an item from inventory (modern clams) - tooltip, and watch for the "can be opened" text?
* Talking to a dude (argent dawn?) - right-click


* if LOOT_CLOSED fires without LOOT_OPENED firing, there just wasn't anything
* Watch for kills without looting! Track kill number too. If kills >> loots, use kills. Test this on those dudes in the desert.


Mouseover monster -> monster killed (can I detect this in any way? Maybe?) -> mouseover monster -> LOOT_CLOSED means looted ended -> might become skinnable/minable/herbable
We'll get lots of extra positives for group critters that are minable, since we never loot_close them, but I'm okay with that.

If we never LOOT_CLOSE a critter, we assume they may or may not have been looted, and we don't check skinnable/minable/herbable. We only count those if they're positive, or if there's a known LOOT_CLOSE.
Looting and mining and the like target the creature! This helps a lot.